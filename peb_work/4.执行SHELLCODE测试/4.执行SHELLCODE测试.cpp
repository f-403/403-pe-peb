// 4.执行SHELLCODE测试.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

#include <iostream>
#include <Windows.h>

int main()
{
    // 定义Shellcode的字节数据
	unsigned char shellcode[] = {
	0x4C, 0x8B, 0xDC, 0x55, 0x53, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x8B, 0xEC, 0x48, 0x83,
	0xEC, 0x60, 0xC7, 0x45, 0xD0, 0x4D, 0x65, 0x73, 0x73, 0x45, 0x33, 0xF6, 0xC7, 0x45, 0xD4, 0x61,
	0x67, 0x65, 0x42, 0x45, 0x8B, 0xFE, 0xC7, 0x45, 0xD8, 0x6F, 0x78, 0x41, 0x00, 0xC7, 0x45, 0xC0,
	0x75, 0x73, 0x65, 0x72, 0xC7, 0x45, 0xC4, 0x33, 0x32, 0x2E, 0x64, 0x66, 0xC7, 0x45, 0xC8, 0x6C,
	0x6C, 0xC6, 0x45, 0xCA, 0x00, 0xC7, 0x45, 0x38, 0x63, 0x6F, 0x6E, 0x74, 0xC7, 0x45, 0x3C, 0x65,
	0x6E, 0x74, 0x00, 0xC7, 0x45, 0x30, 0x74, 0x69, 0x74, 0x6C, 0x66, 0xC7, 0x45, 0x34, 0x65, 0x00,
	0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0xC7, 0x45, 0xE0, 0x4C, 0x6F, 0x61, 0x64,
	0xC7, 0x45, 0xE4, 0x4C, 0x69, 0x62, 0x72, 0xC7, 0x45, 0xE8, 0x61, 0x72, 0x79, 0x41, 0x4C, 0x8B,
	0x68, 0x18, 0x49, 0x83, 0xC5, 0x20, 0xC6, 0x45, 0xEC, 0x00, 0xC7, 0x45, 0xF0, 0x47, 0x65, 0x74,
	0x50, 0xC7, 0x45, 0xF4, 0x72, 0x6F, 0x63, 0x41, 0xC7, 0x45, 0xF8, 0x64, 0x64, 0x72, 0x65, 0x49,
	0x8B, 0x5D, 0x08, 0x66, 0xC7, 0x45, 0xFC, 0x73, 0x73, 0xC6, 0x45, 0xFE, 0x00, 0x4C, 0x3B, 0xEB,
	0x0F, 0x84, 0x7F, 0x00, 0x00, 0x00, 0x49, 0x89, 0x73, 0x18, 0x49, 0x89, 0x7B, 0x20, 0x66, 0x90,
	0x4D, 0x85, 0xF6, 0x75, 0x14, 0x48, 0x8B, 0x53, 0x20, 0x4C, 0x8D, 0x45, 0xE0, 0x48, 0x8D, 0x4B,
	0xF0, 0xE8, 0x7A, 0x00, 0x00, 0x00, 0x4C, 0x8B, 0xF0, 0x4D, 0x85, 0xFF, 0x75, 0x14, 0x48, 0x8B,
	0x53, 0x20, 0x4C, 0x8D, 0x45, 0xF0, 0x48, 0x8D, 0x4B, 0xF0, 0xE8, 0x61, 0x00, 0x00, 0x00, 0x4C,
	0x8B, 0xF8, 0x48, 0x8B, 0x5B, 0x08, 0x4C, 0x3B, 0xEB, 0x75, 0xC5, 0x48, 0x8B, 0xBC, 0x24, 0xA8,
	0x00, 0x00, 0x00, 0x48, 0x8B, 0xB4, 0x24, 0xA0, 0x00, 0x00, 0x00, 0x4D, 0x85, 0xF6, 0x74, 0x25,
	0x4D, 0x85, 0xFF, 0x74, 0x20, 0x48, 0x8D, 0x4D, 0xC0, 0x41, 0xFF, 0xD6, 0x48, 0x8D, 0x55, 0xD0,
	0x48, 0x8B, 0xC8, 0x41, 0xFF, 0xD7, 0x45, 0x33, 0xC9, 0x4C, 0x8D, 0x45, 0x30, 0x48, 0x8D, 0x55,
	0x38, 0x33, 0xC9, 0xFF, 0xD0, 0x33, 0xC0, 0x48, 0x83, 0xC4, 0x60, 0x41, 0x5F, 0x41, 0x5E, 0x41,
	0x5D, 0x5B, 0x5D, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
	0x48, 0x89, 0x5C, 0x24, 0x08, 0x48, 0x89, 0x6C, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x48,
	0x89, 0x7C, 0x24, 0x20, 0x41, 0x54, 0x41, 0x56, 0x41, 0x57, 0x48, 0x8B, 0x49, 0x30, 0x4D, 0x8B,
	0xD8, 0x48, 0x8B, 0xF2, 0x48, 0x63, 0x41, 0x3C, 0x4C, 0x8B, 0x8C, 0x08, 0x88, 0x00, 0x00, 0x00,
	0x49, 0x8B, 0xC1, 0x48, 0xC1, 0xE8, 0x20, 0x85, 0xC0, 0x0F, 0x84, 0xAC, 0x00, 0x00, 0x00, 0x41,
	0x8B, 0xC1, 0x33, 0xDB, 0x44, 0x8B, 0x74, 0x10, 0x18, 0x45, 0x85, 0xF6, 0x0F, 0x84, 0x99, 0x00,
	0x00, 0x00, 0x44, 0x8B, 0x7C, 0x10, 0x24, 0x44, 0x8B, 0x64, 0x10, 0x1C, 0x4C, 0x03, 0xFA, 0x8B,
	0x7C, 0x10, 0x20, 0x4C, 0x03, 0xE2, 0x41, 0x0F, 0xB6, 0x28, 0x48, 0x03, 0xFA, 0x0F, 0x1F, 0x00,
	0x44, 0x8B, 0x0F, 0x33, 0xD2, 0x4C, 0x03, 0xCE, 0x40, 0x84, 0xED, 0x74, 0x0E, 0x49, 0x8B, 0xC3,
	0xFF, 0xC2, 0x48, 0x8D, 0x40, 0x01, 0x80, 0x38, 0x00, 0x75, 0xF5, 0x45, 0x0F, 0xB6, 0x11, 0x33,
	0xC9, 0x45, 0x84, 0xD2, 0x74, 0x15, 0x49, 0x8B, 0xC1, 0x0F, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00,
	0xFF, 0xC1, 0x48, 0x8D, 0x40, 0x01, 0x80, 0x38, 0x00, 0x75, 0xF5, 0x3B, 0xD1, 0x75, 0x31, 0x45,
	0x33, 0xC0, 0x41, 0x3A, 0xEA, 0x75, 0x24, 0x4C, 0x63, 0xD2, 0x49, 0x8B, 0xCB, 0x4D, 0x2B, 0xCB,
	0x48, 0x8B, 0xC1, 0x49, 0x2B, 0xC3, 0x49, 0x3B, 0xC2, 0x74, 0x10, 0x42, 0x0F, 0xB6, 0x44, 0x09,
	0x01, 0x48, 0xFF, 0xC1, 0x41, 0xFF, 0xC0, 0x38, 0x01, 0x74, 0xE5, 0x41, 0x3B, 0xD0, 0x74, 0x28,
	0xFF, 0xC3, 0x48, 0x83, 0xC7, 0x04, 0x41, 0x3B, 0xDE, 0x72, 0x85, 0x33, 0xC0, 0x48, 0x8B, 0x5C,
	0x24, 0x20, 0x48, 0x8B, 0x6C, 0x24, 0x28, 0x48, 0x8B, 0x74, 0x24, 0x30, 0x48, 0x8B, 0x7C, 0x24,
	0x38, 0x41, 0x5F, 0x41, 0x5E, 0x41, 0x5C, 0xC3, 0x48, 0x63, 0xC3, 0x41, 0x0F, 0xB7, 0x0C, 0x47,
	0x41, 0x8B, 0x04, 0x8C, 0x48, 0x03, 0xC6, 0xEB, 0xD4, 
	};

    // 分配可执行内存
    LPVOID execMem = VirtualAlloc(NULL, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

    if (execMem == NULL) {
        std::cerr << "内存分配失败!" << std::endl;
        return 0;
    }

    // 将Shellcode写入内存
    memcpy(execMem, shellcode, sizeof(shellcode));

    // 创建线程来执行Shellcode
    DWORD oldProtect;
    VirtualProtect(execMem, sizeof(shellcode), PAGE_EXECUTE_READ, &oldProtect);

    // 执行Shellcode
    ((void(*)())execMem)();
    return 0;
}

